{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "App_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api": {
      "get": {
        "operationId": "App_getApiInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/health": {
      "get": {
        "operationId": "Health_getHealthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/health/detailed": {
      "get": {
        "operationId": "Health_getDetailedHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/health/database": {
      "get": {
        "operationId": "Health_getDatabaseHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "Auth_register",
        "summary": "Register a new user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "email": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        },
                        "isEmailVerified": {
                          "type": "boolean"
                        }
                      }
                    },
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "User already exists"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "Auth_login",
        "summary": "Login user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "email": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        }
                      }
                    },
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/forgot-password": {
      "post": {
        "operationId": "Auth_forgotPassword",
        "summary": "Request password reset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "operationId": "Auth_resetPassword",
        "summary": "Reset password with token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully reset"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/verify-email": {
      "post": {
        "operationId": "Auth_verifyEmail",
        "summary": "Verify email address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email successfully verified"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/refresh-token": {
      "post": {
        "operationId": "Auth_refreshToken",
        "summary": "Refresh access token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/profile": {
      "get": {
        "operationId": "Auth_getProfile",
        "summary": "Get user profile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "isEmailVerified": {
                      "type": "boolean"
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "Auth_updateProfile",
        "summary": "Update user profile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/change-password": {
      "post": {
        "operationId": "Auth_changePassword",
        "summary": "Change user password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "401": {
            "description": "Unauthorized or invalid current password"
          }
        },
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "Auth_logout",
        "summary": "Logout user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully logged out"
          }
        },
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/deactivate": {
      "post": {
        "operationId": "Auth_deactivateAccount",
        "summary": "Deactivate user account",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Account deactivated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users": {
      "post": {
        "operationId": "Users_create",
        "summary": "Create a new user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "409": {
            "description": "User with this email already exists"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "Users_findAll",
        "summary": "Get all users with pagination and filtering",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Filter by role",
            "schema": {
              "enum": [
                "ADMIN",
                "USER",
                "MANAGER"
              ],
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isEmailVerified",
            "required": false,
            "in": "query",
            "description": "Filter by email verification status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/find-or-create": {
      "post": {
        "operationId": "Users_findOrCreate",
        "summary": "Find existing user or create new one by email/phone",
        "parameters": [],
        "responses": {
          "201": {
            "description": "User found or created successfully"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "Users_findOne",
        "summary": "Get a single user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "Users_update",
        "summary": "Update a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "Users_remove",
        "summary": "Delete a user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}/status": {
      "patch": {
        "operationId": "Users_updateStatus",
        "summary": "Update a user's active status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User status updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}/role": {
      "patch": {
        "operationId": "Users_updateRole",
        "summary": "Update a user's role",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User role updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/stats": {
      "get": {
        "operationId": "Users_getUserStats",
        "summary": "Get user statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/products": {
      "get": {
        "operationId": "Products_findAll",
        "parameters": [
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language preference. Supported languages: VI, EN, ZH, KO, JA, TH. Defaults to Vietnamese (VI)",
            "schema": {
              "enum": [
                "VI",
                "EN",
                "ZH",
                "KO",
                "JA",
                "TH"
              ],
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Alternative way to specify language preference via HTTP header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response includes Content-Language header with the language used"
          }
        },
        "tags": [
          "Products"
        ]
      },
      "post": {
        "operationId": "Products_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/with-translations": {
      "get": {
        "operationId": "Products_findAllMultilingual",
        "parameters": [
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Get products with full translation data. Supported languages: VI, EN, ZH, KO, JA, TH. Defaults to Vietnamese (VI)",
            "schema": {
              "enum": [
                "VI",
                "EN",
                "ZH",
                "KO",
                "JA",
                "TH"
              ],
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Alternative way to specify language preference via HTTP header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response includes Content-Language header with the language used"
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/featured": {
      "get": {
        "operationId": "Products_getFeatured",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/new-arrivals": {
      "get": {
        "operationId": "Products_getNewArrivals",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/best-sellers": {
      "get": {
        "operationId": "Products_getBestSellers",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/on-sale": {
      "get": {
        "operationId": "Products_getOnSale",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/{id}/related": {
      "get": {
        "operationId": "Products_getRelated",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/slug/{slug}": {
      "get": {
        "operationId": "Products_findBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language for SEO metadata (title, description, keywords, etc.). Supported languages: VI, EN, ZH, KO, JA, TH. Defaults to Vietnamese (VI)",
            "schema": {
              "enum": [
                "VI",
                "EN",
                "ZH",
                "KO",
                "JA",
                "TH"
              ],
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Alternative way to specify language preference via HTTP header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Includes hreflang and canonical URL information for SEO"
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "operationId": "Products_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Language preference. Supported languages: VI, EN, ZH, KO, JA, TH. Defaults to Vietnamese (VI)",
            "schema": {
              "enum": [
                "VI",
                "EN",
                "ZH",
                "KO",
                "JA",
                "TH"
              ],
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Alternative way to specify language preference via HTTP header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response includes Content-Language header with the language used"
          }
        },
        "tags": [
          "Products"
        ]
      },
      "patch": {
        "operationId": "Products_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "operationId": "Products_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/multilingual/{id}": {
      "get": {
        "operationId": "Products_findOneMultilingual",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "locale",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      },
      "patch": {
        "operationId": "Products_updateMultilingual",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "operationId": "Products_removeMultilingual",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/multilingual": {
      "post": {
        "operationId": "Products_createMultilingual",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/categories": {
      "get": {
        "operationId": "Categories_findAll",
        "parameters": [
          {
            "name": "lang",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Categories"
        ]
      },
      "post": {
        "operationId": "Categories_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Categories"
        ]
      }
    },
    "/categories/slug/{slug}": {
      "get": {
        "operationId": "Categories_findBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Categories"
        ]
      }
    },
    "/categories/{id}/brands": {
      "get": {
        "operationId": "Categories_getBrandsByCategory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Categories"
        ]
      }
    },
    "/categories/{id}": {
      "get": {
        "operationId": "Categories_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lang",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Categories"
        ]
      },
      "patch": {
        "operationId": "Categories_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Categories"
        ]
      },
      "delete": {
        "operationId": "Categories_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Categories"
        ]
      }
    },
    "/cart/items": {
      "post": {
        "operationId": "Cart_addToCart",
        "summary": "Add item to cart",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item added to cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid data or out of stock"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cart": {
      "get": {
        "operationId": "Cart_getCart",
        "summary": "Get user cart",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cart retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummaryDto"
                }
              }
            }
          }
        },
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "Cart_clearCart",
        "summary": "Clear cart",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cart cleared successfully"
          }
        },
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cart/count": {
      "get": {
        "operationId": "Cart_getCartCount",
        "summary": "Get cart items count",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cart count retrieved successfully"
          }
        },
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cart/items/{id}": {
      "put": {
        "operationId": "Cart_updateCartItem",
        "summary": "Update cart item quantity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid quantity or out of stock"
          },
          "404": {
            "description": "Cart item not found"
          }
        },
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "Cart_removeFromCart",
        "summary": "Remove item from cart",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item removed from cart successfully"
          },
          "404": {
            "description": "Cart item not found"
          }
        },
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "operationId": "Orders_findAll",
        "summary": "Get all orders (Admin only)",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "example": "PENDING",
              "enum": [
                "PENDING",
                "CONFIRMED",
                "PROCESSING",
                "SHIPPED",
                "DELIVERED",
                "CANCELLED",
                "REFUNDED"
              ],
              "type": "string"
            }
          },
          {
            "name": "paymentStatus",
            "required": false,
            "in": "query",
            "description": "Filter by payment status",
            "schema": {
              "example": "PENDING",
              "enum": [
                "PENDING",
                "COMPLETED",
                "FAILED",
                "REFUNDED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for filtering",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for filtering",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "createdAt",
              "enum": [
                "createdAt",
                "totalAmount",
                "status"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "Orders_create",
        "summary": "Create order from cart (for guests or users)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/stats": {
      "get": {
        "operationId": "Orders_getStats",
        "summary": "Get order statistics (Admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Order statistics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/me": {
      "get": {
        "operationId": "Orders_getCurrentUserOrders",
        "summary": "Get current user orders",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "example": "PENDING",
              "enum": [
                "PENDING",
                "CONFIRMED",
                "PROCESSING",
                "SHIPPED",
                "DELIVERED",
                "CANCELLED",
                "REFUNDED"
              ],
              "type": "string"
            }
          },
          {
            "name": "paymentStatus",
            "required": false,
            "in": "query",
            "description": "Filter by payment status",
            "schema": {
              "example": "PENDING",
              "enum": [
                "PENDING",
                "COMPLETED",
                "FAILED",
                "REFUNDED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for filtering",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for filtering",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "createdAt",
              "enum": [
                "createdAt",
                "totalAmount",
                "status"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User orders retrieved"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/number/{orderNumber}": {
      "get": {
        "operationId": "Orders_findByOrderNumber",
        "summary": "Get order by order number",
        "parameters": [
          {
            "name": "orderNumber",
            "required": true,
            "in": "path",
            "description": "Order number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/track/{orderCode}": {
      "get": {
        "operationId": "Orders_trackOrder",
        "summary": "Track order by order code (public)",
        "parameters": [
          {
            "name": "orderCode",
            "required": true,
            "in": "path",
            "description": "Order tracking code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order tracking info retrieved"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "Orders"
        ]
      }
    },
    "/orders/{id}": {
      "get": {
        "operationId": "Orders_findOne",
        "summary": "Get order by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/status": {
      "patch": {
        "operationId": "Orders_updateStatus",
        "summary": "Update order status (Admin only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/cancel": {
      "post": {
        "operationId": "Orders_cancelOrder",
        "summary": "Cancel order",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order cancelled successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{id}/cancel-admin": {
      "post": {
        "operationId": "Orders_cancelOrderAdmin",
        "summary": "Cancel order (Admin only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order cancelled successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/send": {
      "post": {
        "operationId": "Email_sendEmail",
        "summary": "Send email (Admin only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "500": {
            "description": "Failed to send email"
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/test": {
      "post": {
        "operationId": "Email_sendTestEmail",
        "summary": "Send test email (Admin only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test email sent successfully"
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/stats": {
      "get": {
        "operationId": "Email_getEmailStats",
        "summary": "Get email statistics (Admin only)",
        "parameters": [
          {
            "name": "days",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "period": {
                      "type": "string"
                    },
                    "stats": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          },
                          "count": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/test-config": {
      "get": {
        "operationId": "Email_testEmailConfig",
        "summary": "Test email configuration (Admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Email configuration test result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isConfigured": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/welcome": {
      "post": {
        "operationId": "Email_sendWelcomeEmail",
        "summary": "Send welcome email template (Admin only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "firstName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/password-reset": {
      "post": {
        "operationId": "Email_sendPasswordResetEmail",
        "summary": "Send password reset email (Admin only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "resetToken": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "firstName",
                  "resetToken"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/send-notification": {
      "post": {
        "operationId": "Email_sendNotificationWithUserCreation",
        "summary": "Send notification email with auto user creation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/config": {
      "get": {
        "operationId": "Email_getEmailConfig",
        "summary": "Get email configuration (Admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Email configuration retrieved successfully"
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "Email_updateEmailConfig",
        "summary": "Update email configuration (Admin only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string"
                  },
                  "port": {
                    "type": "number"
                  },
                  "secure": {
                    "type": "boolean"
                  },
                  "user": {
                    "type": "string"
                  },
                  "pass": {
                    "type": "string"
                  },
                  "fromName": {
                    "type": "string"
                  },
                  "fromEmail": {
                    "type": "string"
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/config/test": {
      "post": {
        "operationId": "Email_testEmailConnection",
        "summary": "Test email configuration with custom settings (Admin only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "string"
                  },
                  "config": {
                    "type": "object",
                    "properties": {
                      "host": {
                        "type": "string"
                      },
                      "port": {
                        "type": "number"
                      },
                      "secure": {
                        "type": "boolean"
                      },
                      "user": {
                        "type": "string"
                      },
                      "pass": {
                        "type": "string"
                      },
                      "fromName": {
                        "type": "string"
                      },
                      "fromEmail": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "to",
                  "config"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/templates": {
      "get": {
        "operationId": "Email_getEmailTemplates",
        "summary": "Get all email templates (Admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Email templates retrieved successfully"
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/email/templates/{id}": {
      "get": {
        "operationId": "Email_getEmailTemplate",
        "summary": "Get email template by ID (Admin only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "Email_updateEmailTemplate",
        "summary": "Update email template (Admin only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "Email_deleteEmailTemplate",
        "summary": "Delete email template (Admin only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/public/email/send-notification": {
      "post": {
        "operationId": "PublicEmail_sendNotificationWithUserCreation",
        "summary": "Send notification email with auto user creation (Public)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "subject": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Failed to send email"
          }
        },
        "tags": [
          "Public Email"
        ]
      }
    },
    "/payments/payos/{orderId}": {
      "post": {
        "operationId": "Payments_createPayOSPayment",
        "summary": "Create PayOS payment link",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment link created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "desc": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "checkoutUrl": {
                          "type": "string"
                        },
                        "paymentLinkId": {
                          "type": "string"
                        },
                        "qrCode": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Order not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Failed to create payment link"
          }
        },
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/payments/payos/webhook": {
      "post": {
        "operationId": "Payments_handlePayOSWebhook",
        "summary": "PayOS webhook endpoint",
        "parameters": [
          {
            "name": "x-signature",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "description": "Invalid webhook signature"
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/order/{orderId}/status": {
      "get": {
        "operationId": "Payments_getPaymentStatus",
        "summary": "Get payment status for order",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderId": {
                      "type": "number"
                    },
                    "payments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "method": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "number"
                          },
                          "status": {
                            "type": "string"
                          },
                          "transactionId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "paidAt": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/payments/{paymentId}/refund": {
      "post": {
        "operationId": "Payments_refundPayment",
        "summary": "Refund payment (Admin only)",
        "parameters": [
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "description": "Payment ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund processed successfully"
          },
          "400": {
            "description": "Bad request - Payment cannot be refunded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "500": {
            "description": "Failed to process refund"
          }
        },
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/payments/mock/webhook/{paymentLinkId}": {
      "post": {
        "operationId": "Payments_simulateMockWebhook",
        "summary": "Simulate PayOS webhook for demo (Mock service)",
        "parameters": [
          {
            "name": "paymentLinkId",
            "required": true,
            "in": "path",
            "description": "Payment Link ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mock webhook processed successfully"
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payos/create-payment/{orderId}": {
      "post": {
        "operationId": "PayOS_createPaymentLink",
        "summary": "Create PayOS payment link for order",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID to create payment for",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment link created successfully"
          },
          "400": {
            "description": "Bad request or order not found"
          },
          "500": {
            "description": "PayOS service error"
          }
        },
        "tags": [
          "PayOS Integration"
        ]
      }
    },
    "/payos/payment-info/{orderCode}": {
      "get": {
        "operationId": "PayOS_getPaymentInfo",
        "summary": "Get PayOS payment information by order code",
        "parameters": [
          {
            "name": "orderCode",
            "required": true,
            "in": "path",
            "description": "PayOS order code",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment information retrieved"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "tags": [
          "PayOS Integration"
        ]
      }
    },
    "/payos/cancel-payment/{orderCode}": {
      "delete": {
        "operationId": "PayOS_cancelPaymentLink",
        "summary": "Cancel PayOS payment link",
        "parameters": [
          {
            "name": "orderCode",
            "required": true,
            "in": "path",
            "description": "PayOS order code to cancel",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment link cancelled successfully"
          },
          "400": {
            "description": "Cannot cancel payment"
          }
        },
        "tags": [
          "PayOS Integration"
        ]
      }
    },
    "/payos/webhook": {
      "post": {
        "operationId": "PayOS_handleWebhook",
        "summary": "PayOS webhook endpoint for payment notifications",
        "description": "This endpoint receives payment status updates from PayOS",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "description": "Invalid webhook data"
          }
        },
        "tags": [
          "PayOS Integration"
        ]
      }
    },
    "/payos/order-status/{orderId}": {
      "get": {
        "operationId": "PayOS_getOrderPaymentStatus",
        "summary": "Get order payment status",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID to check status",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment status retrieved"
          }
        },
        "tags": [
          "PayOS Integration"
        ]
      }
    },
    "/payos/health": {
      "get": {
        "operationId": "PayOS_healthCheck",
        "summary": "PayOS service health check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service health status"
          }
        },
        "tags": [
          "PayOS Integration"
        ]
      }
    },
    "/payos/test-payment": {
      "post": {
        "operationId": "PayOS_createTestPayment",
        "summary": "Create test payment for development",
        "description": "Creates a test payment link for development and testing purposes",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Test payment created"
          }
        },
        "tags": [
          "PayOS Integration"
        ]
      }
    },
    "/api/payments/gateways/available": {
      "get": {
        "operationId": "PaymentGateway_getAvailableGateways",
        "summary": "Get available payment gateways",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of available payment gateways",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string",
                        "enum": [
                          "PAYOS",
                          "VNPAY",
                          "MOMO",
                          "ZALOPAY",
                          "CASH_ON_DELIVERY"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "available": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/api/payments/create/{orderId}": {
      "post": {
        "operationId": "PaymentGateway_createPayment",
        "summary": "Create payment for order",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Payment creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "paymentUrl": {
                      "type": "string"
                    },
                    "transactionId": {
                      "type": "string"
                    },
                    "qrCode": {
                      "type": "string",
                      "nullable": true
                    },
                    "method": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Payment Gateway"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payments/webhook/{method}": {
      "post": {
        "operationId": "PaymentGateway_handleWebhook",
        "summary": "Webhook endpoint for payment gateway",
        "parameters": [
          {
            "name": "method",
            "required": true,
            "in": "path",
            "description": "Payment method",
            "schema": {
              "enum": [
                "PAYOS",
                "VNPAY",
                "MOMO",
                "ZALOPAY",
                "CASH_ON_DELIVERY"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "description": "Invalid webhook data"
          }
        },
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/api/payments/status/{transactionId}": {
      "get": {
        "operationId": "PaymentGateway_getPaymentStatus",
        "summary": "Get payment status by transaction ID",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "description": "Transaction ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "required": true,
            "in": "query",
            "description": "Payment method",
            "schema": {
              "enum": [
                "PAYOS",
                "VNPAY",
                "MOMO",
                "ZALOPAY",
                "CASH_ON_DELIVERY"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "COMPLETED",
                        "FAILED",
                        "REFUNDED",
                        "CANCELLED"
                      ]
                    },
                    "amount": {
                      "type": "number"
                    },
                    "paidAt": {
                      "type": "string",
                      "nullable": true
                    },
                    "method": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Payment Gateway"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payments/refund/{transactionId}": {
      "post": {
        "operationId": "PaymentGateway_refundPayment",
        "summary": "Refund payment",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "description": "Transaction ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "required": true,
            "in": "query",
            "description": "Payment method",
            "schema": {
              "enum": [
                "PAYOS",
                "VNPAY",
                "MOMO",
                "ZALOPAY",
                "CASH_ON_DELIVERY"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Refund request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "nullable": true
                  },
                  "reason": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refund processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "refundId": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "method": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Payment Gateway"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/payments/order/{orderId}/payments": {
      "get": {
        "operationId": "PaymentGateway_getOrderPayments",
        "summary": "Get all payments for an order",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderId": {
                      "type": "number"
                    },
                    "payments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "method": {
                            "type": "string",
                            "enum": [
                              "PAYOS",
                              "VNPAY",
                              "MOMO",
                              "ZALOPAY",
                              "CASH_ON_DELIVERY"
                            ]
                          },
                          "amount": {
                            "type": "number"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "PENDING",
                              "COMPLETED",
                              "FAILED",
                              "REFUNDED",
                              "CANCELLED"
                            ]
                          },
                          "transactionId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "processedAt": {
                            "type": "string",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Payment Gateway"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/maps/geocode": {
      "get": {
        "operationId": "Maps_geocodeAddress",
        "summary": "Geocode address to coordinates",
        "description": "Convert Vietnamese address to latitude/longitude coordinates",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "Address to geocode",
            "schema": {
              "example": "Số 1 Đại Cồ Việt, Hai Bà Trưng, Hà Nội",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Geocoding successful"
          },
          "400": {
            "description": "Invalid address"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/maps/reverse-geocode": {
      "get": {
        "operationId": "Maps_reverseGeocode",
        "summary": "Reverse geocode coordinates to address",
        "description": "Convert latitude/longitude coordinates to Vietnamese address",
        "parameters": [
          {
            "name": "lat",
            "required": true,
            "in": "query",
            "description": "Latitude",
            "schema": {
              "example": "21.0285",
              "type": "string"
            }
          },
          {
            "name": "lng",
            "required": true,
            "in": "query",
            "description": "Longitude",
            "schema": {
              "example": "105.8542",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reverse geocoding successful"
          },
          "400": {
            "description": "Invalid coordinates"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/maps/autocomplete": {
      "get": {
        "operationId": "Maps_autocompletePlace",
        "summary": "Address autocomplete suggestions",
        "description": "Get address suggestions for Vietnamese locations",
        "parameters": [
          {
            "name": "input",
            "required": true,
            "in": "query",
            "description": "Search input",
            "schema": {
              "example": "Cầu Giấy",
              "type": "string"
            }
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "description": "Bias location (lat,lng)",
            "schema": {
              "example": "21.0285,105.8542",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Autocomplete suggestions retrieved"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/maps/place-detail/{placeId}": {
      "get": {
        "operationId": "Maps_getPlaceDetail",
        "summary": "Get detailed place information",
        "description": "Get complete details for a specific place by place_id",
        "parameters": [
          {
            "name": "placeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Place details retrieved"
          },
          "400": {
            "description": "Invalid place ID"
          },
          "404": {
            "description": "Place not found"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/maps/nearby": {
      "get": {
        "operationId": "Maps_searchNearby",
        "summary": "Search nearby places",
        "description": "Find places near specified coordinates",
        "parameters": [
          {
            "name": "lat",
            "required": true,
            "in": "query",
            "description": "Latitude",
            "schema": {
              "example": "21.0285",
              "type": "string"
            }
          },
          {
            "name": "lng",
            "required": true,
            "in": "query",
            "description": "Longitude",
            "schema": {
              "example": "105.8542",
              "type": "string"
            }
          },
          {
            "name": "radius",
            "required": false,
            "in": "query",
            "description": "Search radius in meters",
            "schema": {
              "example": "1000",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Place type to search",
            "schema": {
              "example": "restaurant",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Nearby places found"
          },
          "400": {
            "description": "Invalid coordinates"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/maps/validate-address": {
      "post": {
        "operationId": "Maps_validateAddress",
        "summary": "Validate Vietnamese address",
        "description": "Validate and format Vietnamese address with geocoding",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "example": "Số 1 Đại Cồ Việt, Hai Bà Trưng, Hà Nội"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address validation result"
          },
          "400": {
            "description": "Invalid address format"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/maps/distance": {
      "get": {
        "operationId": "Maps_getDistance",
        "summary": "Calculate distance between addresses",
        "description": "Calculate distance and travel time between two Vietnamese addresses",
        "parameters": [
          {
            "name": "origin",
            "required": true,
            "in": "query",
            "description": "Origin address",
            "schema": {
              "example": "Hà Nội",
              "type": "string"
            }
          },
          {
            "name": "destination",
            "required": true,
            "in": "query",
            "description": "Destination address",
            "schema": {
              "example": "TP.HCM",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Distance calculated"
          },
          "400": {
            "description": "Invalid addresses"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/maps/health": {
      "get": {
        "operationId": "Maps_healthCheck",
        "summary": "Goong Maps service health check",
        "description": "Check if Goong Maps service is configured and working",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service health status"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/maps/config": {
      "get": {
        "operationId": "Maps_getMapConfig",
        "summary": "Get maps configuration for frontend",
        "description": "Get public configuration needed for frontend map integration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Maps configuration"
          }
        },
        "tags": [
          "Maps & Geocoding"
        ]
      }
    },
    "/mcp/tools/call": {
      "post": {
        "operationId": "Mcp_callTool",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/mcp/tools/list": {
      "post": {
        "operationId": "Mcp_listTools",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/dashboard/mcp/tools/call": {
      "post": {
        "operationId": "DashboardMcp_callTool",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/admin/dashboard": {
      "get": {
        "operationId": "Admin_getDashboardStats",
        "summary": "Get admin dashboard statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dashboard statistics retrieved successfully"
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/system-health": {
      "get": {
        "operationId": "Admin_getSystemHealth",
        "summary": "Check system health and services",
        "parameters": [],
        "responses": {
          "200": {
            "description": "System health status retrieved successfully"
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/test-email": {
      "post": {
        "operationId": "Admin_sendTestEmail",
        "summary": "Send test email",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test email sent successfully"
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/users": {
      "get": {
        "operationId": "Admin_getUsers",
        "summary": "Get users list with pagination",
        "parameters": [
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/orders": {
      "get": {
        "operationId": "Admin_getOrders",
        "summary": "Get orders list with pagination",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/stats/users": {
      "get": {
        "operationId": "Admin_getUserStats",
        "summary": "Get user statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/stats/orders": {
      "get": {
        "operationId": "Admin_getOrderStats",
        "summary": "Get order statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/stats/products": {
      "get": {
        "operationId": "Admin_getProductStats",
        "summary": "Get product statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/stats/revenue": {
      "get": {
        "operationId": "Admin_getRevenueStats",
        "summary": "Get revenue statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/analytics": {
      "get": {
        "operationId": "Admin_getAnalytics",
        "summary": "Get business analytics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/clear-cache": {
      "post": {
        "operationId": "Admin_clearCache",
        "summary": "Clear application cache",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/users/{id}/zalo": {
      "get": {
        "operationId": "Admin_getUserZaloPhone",
        "summary": "Get user Zalo phone number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Zalo phone number retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "Admin_updateUserZaloPhone",
        "summary": "Update user Zalo phone number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Zalo phone number updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/users/{id}/status": {
      "put": {
        "operationId": "Admin_updateUserStatus",
        "summary": "Update user status (active/inactive/suspended)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User status updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/users/{id}/role": {
      "put": {
        "operationId": "Admin_updateUserRole",
        "summary": "Update user role",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User role updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/products": {
      "get": {
        "operationId": "Admin_getProducts",
        "summary": "Get products list with pagination",
        "parameters": [
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "Admin_createProduct",
        "summary": "Create a new product",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/products/{id}": {
      "put": {
        "operationId": "Admin_updateProduct",
        "summary": "Update product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "Admin_deleteProduct",
        "summary": "Delete product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/orders/{id}/status": {
      "put": {
        "operationId": "Admin_updateOrderStatus",
        "summary": "Update order status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/orders/{id}": {
      "get": {
        "operationId": "Admin_getOrderDetails",
        "summary": "Get order details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/upload/status": {
      "get": {
        "operationId": "Upload_getStatus",
        "summary": "Check upload service status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Upload service status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "configured": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Upload"
        ]
      }
    },
    "/upload/avatar": {
      "post": {
        "operationId": "Upload_uploadAvatar",
        "summary": "Upload user avatar",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Avatar uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Upload"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/upload/product/{productId}/images": {
      "post": {
        "operationId": "Upload_uploadProductImages",
        "summary": "Upload product images (Admin/Manager only)",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product images uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "urls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "count": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Upload"
        ]
      }
    },
    "/upload/category/{categoryId}/image": {
      "post": {
        "operationId": "Upload_uploadCategoryImage",
        "summary": "Upload category image (Admin/Manager only)",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category image uploaded successfully"
          }
        },
        "tags": [
          "Upload"
        ]
      }
    },
    "/upload/blog/{blogId}/featured-image": {
      "post": {
        "operationId": "Upload_uploadBlogImage",
        "summary": "Upload blog featured image (Admin/Manager only)",
        "parameters": [
          {
            "name": "blogId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Upload"
        ]
      }
    },
    "/upload/review/{reviewId}/images": {
      "post": {
        "operationId": "Upload_uploadReviewImages",
        "summary": "Upload review images",
        "parameters": [
          {
            "name": "reviewId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Upload"
        ]
      }
    },
    "/upload/general": {
      "post": {
        "operationId": "Upload_uploadGeneralFile",
        "summary": "Upload general file (Admin/Manager only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "folder": {
                    "type": "string",
                    "description": "Optional folder name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Upload"
        ]
      }
    },
    "/upload/file/{publicId}": {
      "delete": {
        "operationId": "Upload_deleteFile",
        "summary": "Delete uploaded file (Admin/Manager only)",
        "parameters": [
          {
            "name": "publicId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully"
          }
        },
        "tags": [
          "Upload"
        ]
      }
    },
    "/api/analytics/users/stats": {
      "get": {
        "operationId": "Analytics_getUserStats",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/analytics/email/stats": {
      "get": {
        "operationId": "Analytics_getEmailStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/analytics/reviews/stats": {
      "get": {
        "operationId": "Analytics_getReviewStats",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/analytics/dashboard/stats": {
      "get": {
        "operationId": "Analytics_getDashboardStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/analytics/orders/stats": {
      "get": {
        "operationId": "Analytics_getOrderStats",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/analytics/products/stats": {
      "get": {
        "operationId": "Analytics_getProductStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/analytics/revenue/stats": {
      "get": {
        "operationId": "Analytics_getRevenueStats",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/inventory/alerts": {
      "get": {
        "operationId": "Inventory_getStockAlerts",
        "summary": "Get stock alerts (Admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Stock alerts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "productId": {
                        "type": "number"
                      },
                      "productName": {
                        "type": "string"
                      },
                      "currentStock": {
                        "type": "number"
                      },
                      "minimumStock": {
                        "type": "number"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "LOW_STOCK",
                          "OUT_OF_STOCK"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "tags": [
          "Inventory"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/inventory/levels": {
      "get": {
        "operationId": "Inventory_getStockLevels",
        "summary": "Get current stock levels (Admin only)",
        "parameters": [
          {
            "name": "productIds",
            "required": false,
            "in": "query",
            "description": "Comma-separated product IDs",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stock levels retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "sku": {
                        "type": "string"
                      },
                      "stock": {
                        "type": "number"
                      },
                      "price": {
                        "type": "number"
                      },
                      "isActive": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "tags": [
          "Inventory"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/inventory/history": {
      "get": {
        "operationId": "Inventory_getInventoryHistory",
        "summary": "Get inventory movement history (Admin only)",
        "parameters": [
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of records to skip",
            "schema": {}
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records to return",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "productId": {
                            "type": "number"
                          },
                          "quantity": {
                            "type": "number"
                          },
                          "type": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "previousStock": {
                            "type": "number"
                          },
                          "newStock": {
                            "type": "number"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "products": {
                            "type": "object"
                          },
                          "order": {
                            "type": "object"
                          },
                          "users": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "offset": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "tags": [
          "Inventory"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/inventory/update-stock": {
      "post": {
        "operationId": "Inventory_updateStock",
        "summary": "Update product stock (Admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Stock updated successfully"
          },
          "400": {
            "description": "Bad request - Invalid data or insufficient stock"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Inventory"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/inventory/bulk-update": {
      "post": {
        "operationId": "Inventory_bulkUpdateStock",
        "summary": "Bulk update stock for multiple products (Admin only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bulk stock update completed successfully"
          },
          "400": {
            "description": "Bad request - Invalid data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "tags": [
          "Inventory"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/inventory/validate-availability": {
      "post": {
        "operationId": "Inventory_validateStockAvailability",
        "summary": "Validate stock availability for multiple products",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Stock availability validated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isValid": {
                      "type": "boolean"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "availableStock": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "tags": [
          "Inventory"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/notifications": {
      "get": {
        "operationId": "Notifications_getUserNotifications",
        "summary": "Get user notifications",
        "parameters": [
          {
            "name": "unreadOnly",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications retrieved successfully"
          }
        },
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/notifications/unread-count": {
      "get": {
        "operationId": "Notifications_getUnreadCount",
        "summary": "Get unread notification count",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Unread count retrieved successfully"
          }
        },
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/notifications/{id}/read": {
      "put": {
        "operationId": "Notifications_markAsRead",
        "summary": "Mark notification as read",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read"
          }
        },
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/notifications/mark-all-read": {
      "put": {
        "operationId": "Notifications_markAllAsRead",
        "summary": "Mark all notifications as read",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All notifications marked as read"
          }
        },
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/notifications/{id}": {
      "delete": {
        "operationId": "Notifications_deleteNotification",
        "summary": "Delete a notification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification deleted successfully"
          }
        },
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/notifications/send-promotion": {
      "post": {
        "operationId": "Notifications_sendPromotionNotification",
        "summary": "Send promotion notification to users (admin only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPromotionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Promotion notifications sent successfully"
          }
        },
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/notifications/test": {
      "post": {
        "operationId": "Notifications_sendTestNotification",
        "summary": "Send test notification (admin only)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Test notification sent"
          }
        },
        "tags": [
          "Notifications"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/services": {
      "get": {
        "operationId": "Services_findAll",
        "summary": "Get all services with pagination and filtering",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "enum": [
                "name",
                "price",
                "createdAt",
                "averageRating"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 10)",
            "schema": {}
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {}
          },
          {
            "name": "maxPrice",
            "required": false,
            "in": "query",
            "description": "Maximum price filter",
            "schema": {}
          },
          {
            "name": "minPrice",
            "required": false,
            "in": "query",
            "description": "Minimum price filter",
            "schema": {}
          },
          {
            "name": "serviceType",
            "required": false,
            "in": "query",
            "description": "Filter by service type",
            "schema": {}
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {}
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "price": {
                            "type": "number"
                          },
                          "duration": {
                            "type": "string"
                          },
                          "serviceType": {
                            "type": "string"
                          },
                          "averageRating": {
                            "type": "number"
                          },
                          "service_categories": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        },
                        "hasNext": {
                          "type": "boolean"
                        },
                        "hasPrev": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ]
      }
    },
    "/services/featured": {
      "get": {
        "operationId": "Services_findFeatured",
        "summary": "Get featured services",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of featured services (default: 6)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Featured services retrieved successfully"
          }
        },
        "tags": [
          "Services"
        ]
      }
    },
    "/services/categories": {
      "get": {
        "operationId": "Services_getCategories",
        "summary": "Get all service categories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "icon": {
                        "type": "string"
                      },
                      "_count": {
                        "type": "object",
                        "properties": {
                          "services": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Services"
        ]
      }
    },
    "/services/categories/{slug}": {
      "get": {
        "operationId": "Services_getCategoryBySlug",
        "summary": "Get service category by slug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Category slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service category retrieved successfully"
          },
          "404": {
            "description": "Service category not found"
          }
        },
        "tags": [
          "Services"
        ]
      }
    },
    "/services/category/{categoryId}": {
      "get": {
        "operationId": "Services_findByCategory",
        "summary": "Get services by category ID",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Services in category retrieved successfully"
          }
        },
        "tags": [
          "Services"
        ]
      }
    },
    "/services/{id}": {
      "get": {
        "operationId": "Services_findOne",
        "summary": "Get service by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Service ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "price": {
                      "type": "number"
                    },
                    "duration": {
                      "type": "string"
                    },
                    "serviceType": {
                      "type": "string"
                    },
                    "features": {
                      "type": "array"
                    },
                    "requirements": {
                      "type": "array"
                    },
                    "process": {
                      "type": "array"
                    },
                    "averageRating": {
                      "type": "number"
                    },
                    "service_categories": {
                      "type": "object"
                    },
                    "service_reviews": {
                      "type": "array"
                    },
                    "_count": {
                      "type": "object",
                      "properties": {
                        "service_reviews": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found"
          }
        },
        "tags": [
          "Services"
        ]
      }
    },
    "/services/slug/{slug}": {
      "get": {
        "operationId": "Services_findBySlug",
        "summary": "Get service by slug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Service slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service retrieved successfully"
          },
          "404": {
            "description": "Service not found"
          }
        },
        "tags": [
          "Services"
        ]
      }
    },
    "/services/{id}/stats": {
      "get": {
        "operationId": "Services_getServiceStats",
        "summary": "Get service statistics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Service ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalReviews": {
                      "type": "number"
                    },
                    "completedBookings": {
                      "type": "number"
                    },
                    "averageRating": {
                      "type": "number"
                    },
                    "ratingDistribution": {
                      "type": "object",
                      "properties": {
                        "1": {
                          "type": "number"
                        },
                        "2": {
                          "type": "number"
                        },
                        "3": {
                          "type": "number"
                        },
                        "4": {
                          "type": "number"
                        },
                        "5": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found"
          }
        },
        "tags": [
          "Services"
        ]
      }
    },
    "/bookings/services/{serviceId}": {
      "post": {
        "operationId": "ServiceBookings_createBooking",
        "summary": "Book a service (for guests or logged-in users)",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "description": "Service ID to book",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Service booked successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Service not found"
          }
        },
        "tags": [
          "Service Bookings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/bookings": {
      "get": {
        "operationId": "ServiceBookings_getUserBookings",
        "summary": "Get user bookings",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by booking status",
            "schema": {
              "enum": [
                "PENDING",
                "CONFIRMED",
                "IN_PROGRESS",
                "COMPLETED",
                "CANCELLED",
                "RESCHEDULED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User bookings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      },
                      "bookingNumber": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "totalAmount": {
                        "type": "number"
                      },
                      "scheduledDate": {
                        "type": "string"
                      },
                      "services": {
                        "type": "object"
                      },
                      "payments": {
                        "type": "array"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Service Bookings"
        ]
      }
    },
    "/bookings/{id}": {
      "get": {
        "operationId": "ServiceBookings_getBooking",
        "summary": "Get booking details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Booking ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "bookingNumber": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "totalAmount": {
                      "type": "number"
                    },
                    "scheduledDate": {
                      "type": "string"
                    },
                    "customerName": {
                      "type": "string"
                    },
                    "customerPhone": {
                      "type": "string"
                    },
                    "customerEmail": {
                      "type": "string"
                    },
                    "requirements": {
                      "type": "array"
                    },
                    "notes": {
                      "type": "string"
                    },
                    "services": {
                      "type": "object"
                    },
                    "payments": {
                      "type": "array"
                    },
                    "service_reviews": {
                      "type": "array"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Booking not found"
          }
        },
        "tags": [
          "Service Bookings"
        ]
      },
      "patch": {
        "operationId": "ServiceBookings_updateBooking",
        "summary": "Update booking (limited fields for customers)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Booking ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking updated successfully"
          },
          "400": {
            "description": "Bad request - Invalid status transition"
          },
          "404": {
            "description": "Booking not found"
          }
        },
        "tags": [
          "Service Bookings"
        ]
      }
    },
    "/bookings/track/{bookingNumber}": {
      "get": {
        "operationId": "ServiceBookings_trackBooking",
        "summary": "Track booking by booking number",
        "parameters": [
          {
            "name": "bookingNumber",
            "required": true,
            "in": "path",
            "description": "Booking number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking tracking information retrieved successfully"
          },
          "404": {
            "description": "Booking not found"
          }
        },
        "tags": [
          "Service Bookings"
        ]
      }
    },
    "/bookings/{id}/cancel": {
      "post": {
        "operationId": "ServiceBookings_cancelBooking",
        "summary": "Cancel booking",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Booking ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking cancelled successfully"
          },
          "400": {
            "description": "Cannot cancel booking in current status"
          },
          "404": {
            "description": "Booking not found"
          }
        },
        "tags": [
          "Service Bookings"
        ]
      }
    },
    "/bookings/{id}/reschedule": {
      "post": {
        "operationId": "ServiceBookings_rescheduleBooking",
        "summary": "Reschedule booking",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Booking ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking rescheduled successfully"
          },
          "400": {
            "description": "Cannot reschedule booking in current status"
          },
          "404": {
            "description": "Booking not found"
          }
        },
        "tags": [
          "Service Bookings"
        ]
      }
    },
    "/admin/conversations": {
      "post": {
        "operationId": "Messaging_createConversation",
        "summary": "Create a new conversation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Conversation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Admin Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "Messaging_getAdminConversations",
        "summary": "Get all conversations for admin dashboard",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Conversation type",
            "schema": {
              "enum": [
                "PRIVATE",
                "GROUP",
                "SUPPORT"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedConversationsDto"
                }
              }
            }
          }
        },
        "tags": [
          "Admin Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/conversations/{conversationId}/messages": {
      "get": {
        "operationId": "Messaging_getMessages",
        "summary": "Get messages in a conversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "Conversation UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 50,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMessagesDto"
                }
              }
            }
          }
        },
        "tags": [
          "Admin Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "Messaging_sendMessage",
        "summary": "Send a message in a conversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "Conversation UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Admin Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/admin/conversations/{conversationId}/mark-read": {
      "put": {
        "operationId": "Messaging_markMessagesAsRead",
        "summary": "Mark messages as read in a conversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "Conversation UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages marked as read successfully"
          }
        },
        "tags": [
          "Admin Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/conversations": {
      "post": {
        "operationId": "UserMessaging_createConversation",
        "summary": "Create a new conversation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Conversation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/conversations/{conversationId}/messages": {
      "get": {
        "operationId": "UserMessaging_getMessages",
        "summary": "Get messages in a conversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "Conversation UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 50,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMessagesDto"
                }
              }
            }
          }
        },
        "tags": [
          "User Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserMessaging_sendMessage",
        "summary": "Send a message in a conversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "Conversation UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/conversations/{conversationId}/mark-read": {
      "put": {
        "operationId": "UserMessaging_markMessagesAsRead",
        "summary": "Mark messages as read in a conversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "Conversation UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages marked as read successfully"
          }
        },
        "tags": [
          "User Messaging"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recommendations/products/{productId}": {
      "get": {
        "operationId": "Recommendations_getProductRecommendations",
        "summary": "Get product recommendations",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns recommended products based on the given product"
          }
        },
        "tags": [
          "Recommendations"
        ]
      }
    },
    "/recommendations/user": {
      "get": {
        "operationId": "Recommendations_getUserRecommendations",
        "summary": "Get personalized recommendations for user",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns personalized product recommendations for the user"
          }
        },
        "tags": [
          "Recommendations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recommendations/featured": {
      "get": {
        "operationId": "Recommendations_getFeaturedProducts",
        "summary": "Get featured products",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns featured products"
          }
        },
        "tags": [
          "Recommendations"
        ]
      }
    },
    "/recommendations/trending": {
      "get": {
        "operationId": "Recommendations_getTrendingProducts",
        "summary": "Get trending products",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns trending products based on recent orders"
          }
        },
        "tags": [
          "Recommendations"
        ]
      }
    },
    "/recommendations/products/{productId}/also-bought": {
      "get": {
        "operationId": "Recommendations_getAlsoBoughtProducts",
        "summary": "Get \"People also bought\" recommendations",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns products frequently bought by users who also bought this product"
          }
        },
        "tags": [
          "Recommendations"
        ]
      }
    },
    "/recommendations/products/{productId}/frequently-bought-together": {
      "get": {
        "operationId": "Recommendations_getFrequentlyBoughtTogether",
        "summary": "Get \"Frequently bought together\" recommendations",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns products frequently purchased together with this product"
          }
        },
        "tags": [
          "Recommendations"
        ]
      }
    },
    "/ratings": {
      "post": {
        "operationId": "Ratings_create",
        "summary": "Tạo đánh giá mới",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRatingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tạo đánh giá thành công"
          },
          "400": {
            "description": "Dữ liệu không hợp lệ"
          }
        },
        "tags": [
          "Ratings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "Ratings_findAll",
        "summary": "Lấy danh sách đánh giá",
        "parameters": [
          {
            "name": "entityType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "PRODUCT_REVIEW",
                "SERVICE_REVIEW",
                "BLOG_RATING",
                "CATEGORY_RATING",
                "USER_FEEDBACK",
                "WEBSITE_RATING"
              ],
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "rating",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "type": "number"
            }
          },
          {
            "name": "isApproved",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "rating",
                "createdAt",
                "helpfulCount"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lấy danh sách thành công"
          }
        },
        "tags": [
          "Ratings"
        ]
      }
    },
    "/ratings/stats/{entityType}/{entityId}": {
      "get": {
        "operationId": "Ratings_getStats",
        "summary": "Lấy thống kê đánh giá của một entity",
        "parameters": [
          {
            "name": "entityType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lấy thống kê thành công"
          }
        },
        "tags": [
          "Ratings"
        ]
      }
    },
    "/ratings/{id}": {
      "get": {
        "operationId": "Ratings_findOne",
        "summary": "Lấy chi tiết đánh giá",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lấy chi tiết thành công"
          },
          "404": {
            "description": "Không tìm thấy đánh giá"
          }
        },
        "tags": [
          "Ratings"
        ]
      },
      "patch": {
        "operationId": "Ratings_update",
        "summary": "Cập nhật đánh giá",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRatingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cập nhật thành công"
          },
          "403": {
            "description": "Không có quyền sửa đánh giá này"
          },
          "404": {
            "description": "Không tìm thấy đánh giá"
          }
        },
        "tags": [
          "Ratings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "Ratings_remove",
        "summary": "Xóa đánh giá",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Xóa thành công"
          },
          "403": {
            "description": "Không có quyền xóa đánh giá này"
          },
          "404": {
            "description": "Không tìm thấy đánh giá"
          }
        },
        "tags": [
          "Ratings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ratings/{id}/moderate": {
      "patch": {
        "operationId": "Ratings_moderate",
        "summary": "Kiểm duyệt đánh giá (chỉ Admin/Manager)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerateRatingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Kiểm duyệt thành công"
          },
          "403": {
            "description": "Không có quyền kiểm duyệt"
          },
          "404": {
            "description": "Không tìm thấy đánh giá"
          }
        },
        "tags": [
          "Ratings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ratings/{id}/vote": {
      "post": {
        "operationId": "Ratings_vote",
        "summary": "Vote đánh giá hữu ích/không hữu ích",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoteRatingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vote thành công"
          },
          "400": {
            "description": "Lỗi khi vote"
          }
        },
        "tags": [
          "Ratings"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/test/seed": {
      "post": {
        "operationId": "Test_seedDatabase",
        "summary": "Seed database with test data",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "test"
        ]
      }
    },
    "/api/test/clean": {
      "post": {
        "operationId": "Test_cleanDatabase",
        "summary": "Clean test data from database",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "test"
        ]
      }
    },
    "/api/test/reset": {
      "post": {
        "operationId": "Test_resetDatabase",
        "summary": "Reset database (clean then seed)",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "test"
        ]
      }
    },
    "/api/test/emails": {
      "get": {
        "operationId": "Test_getTestEmails",
        "summary": "Get test emails sent",
        "parameters": [
          {
            "name": "to",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "test"
        ]
      }
    }
  },
  "info": {
    "title": "Audio Tai Loc E-commerce API",
    "description": "\n# Audio Tai Loc E-commerce API Documentation\n\nThis API provides endpoints for managing an e-commerce platform specializing in audio equipment.\n\n## Features\n\n- **Authentication**: JWT-based authentication with role-based access control\n- **Products**: Full CRUD operations for product management\n- **Categories**: Hierarchical category management\n- **Cart**: Shopping cart functionality with session persistence\n- **Orders**: Order processing and management\n- **Payments**: Multiple payment method support (PayOS, COD, Bank Transfer)\n- **Users**: User management and profiles\n- **Inventory**: Real-time inventory tracking\n- **Search**: Advanced product search with filters\n- **Multilingual**: Support for Vietnamese and English\n\n## Authentication\n\nMost endpoints require authentication. Include the JWT token in the Authorization header:\n```\nAuthorization: Bearer <your-jwt-token>\n```\n\n## Rate Limiting\n\nAPI requests are rate-limited to prevent abuse:\n- Anonymous users: 100 requests per 15 minutes\n- Authenticated users: 1000 requests per 15 minutes\n\n## Pagination\n\nList endpoints support pagination with the following query parameters:\n- `page`: Page number (default: 1)\n- `limit`: Items per page (default: 10, max: 100)\n\n## Error Responses\n\nAll error responses follow this format:\n```json\n{\n  \"statusCode\": 400,\n  \"message\": \"Error description\",\n  \"error\": \"Bad Request\"\n}\n```\n    ",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "products",
      "description": "Product management"
    },
    {
      "name": "categories",
      "description": "Category management"
    },
    {
      "name": "cart",
      "description": "Shopping cart operations"
    },
    {
      "name": "orders",
      "description": "Order management"
    },
    {
      "name": "payments",
      "description": "Payment processing"
    },
    {
      "name": "users",
      "description": "User management"
    },
    {
      "name": "inventory",
      "description": "Inventory management"
    },
    {
      "name": "search",
      "description": "Search functionality"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Development server"
    },
    {
      "url": "https://api.audiotailoc.com",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 8 characters)",
            "example": "SecurePassword123!",
            "minLength": 8
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "Nguyễn"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Văn A"
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "example": "+84901234567"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "User date of birth",
            "example": "1990-01-01"
          },
          "gender": {
            "type": "string",
            "description": "User gender",
            "example": "male",
            "enum": [
              "male",
              "female",
              "other"
            ]
          }
        },
        "required": [
          "email",
          "password",
          "firstName",
          "lastName"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "SecurePassword123!"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Password reset token",
            "example": "abc123def456ghi789"
          },
          "newPassword": {
            "type": "string",
            "description": "New password (minimum 8 characters)",
            "example": "NewPassword123!",
            "minLength": 8
          }
        },
        "required": [
          "token",
          "newPassword"
        ]
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Email verification token",
            "example": "abc123def456ghi789"
          }
        },
        "required": [
          "token"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "Nguyễn"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Văn A"
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "example": "+84901234567"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "User date of birth",
            "example": "1990-01-01"
          },
          "gender": {
            "type": "string",
            "description": "User gender",
            "example": "male",
            "enum": [
              "male",
              "female",
              "other"
            ]
          },
          "avatar": {
            "type": "string",
            "description": "User avatar URL",
            "example": "https://example.com/avatar.jpg"
          }
        }
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password",
            "example": "OldPassword123!"
          },
          "newPassword": {
            "type": "string",
            "description": "New password (minimum 8 characters)",
            "example": "NewPassword123!",
            "minLength": 8
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email"
          },
          "firstName": {
            "type": "string",
            "description": "User first name"
          },
          "lastName": {
            "type": "string",
            "description": "User last name"
          },
          "phone": {
            "type": "string",
            "description": "User phone number"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "ADMIN",
              "USER",
              "MANAGER"
            ],
            "default": "USER"
          },
          "password": {
            "type": "string",
            "description": "User password"
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName",
          "password"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name"
          },
          "lastName": {
            "type": "string",
            "description": "User last name"
          },
          "phone": {
            "type": "string",
            "description": "User phone number"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "ADMIN",
              "USER",
              "MANAGER"
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "User active status"
          }
        }
      },
      "UpdateUserStatusDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "User active status"
          }
        },
        "required": [
          "isActive"
        ]
      },
      "UpdateUserRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "ADMIN",
              "USER",
              "MANAGER"
            ]
          }
        },
        "required": [
          "role"
        ]
      },
      "ProductImageDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "altText": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "sku": {
            "type": "string"
          },
          "stock": {
            "type": "number",
            "default": 0
          },
          "categoryId": {
            "type": "number"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductImageDto"
            }
          },
          "isActive": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "name",
          "price",
          "categoryId"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "sku": {
            "type": "string"
          },
          "stock": {
            "type": "number"
          },
          "categoryId": {
            "type": "number"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductImageDto"
            }
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {}
      },
      "AddToCartDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "number",
            "description": "Product ID"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "default": 1
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CartItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "productId": {
            "type": "number"
          },
          "productName": {
            "type": "string"
          },
          "productSlug": {
            "type": "string"
          },
          "productImage": {
            "type": "string"
          },
          "productSku": {
            "type": "string"
          },
          "unitPrice": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "totalPrice": {
            "type": "number"
          },
          "isInStock": {
            "type": "boolean"
          },
          "availableStock": {
            "type": "number"
          },
          "addedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "productId",
          "productName",
          "productSlug",
          "productImage",
          "productSku",
          "unitPrice",
          "quantity",
          "totalPrice",
          "isInStock",
          "availableStock",
          "addedAt"
        ]
      },
      "CartSummaryDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemResponseDto"
            }
          },
          "totalItems": {
            "type": "number"
          },
          "totalAmount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },
        "required": [
          "items",
          "totalItems",
          "totalAmount",
          "currency"
        ]
      },
      "UpdateCartItemDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "New quantity"
          }
        },
        "required": [
          "quantity"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "shippingAddressId": {
            "type": "number",
            "description": "Shipping address ID",
            "example": 1
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method",
            "example": "PAYOS",
            "enum": [
              "PAYOS",
              "VNPAY",
              "MOMO",
              "ZALOPAY",
              "CASH_ON_DELIVERY"
            ]
          },
          "customerNotes": {
            "type": "string",
            "description": "Customer notes",
            "example": "Please deliver after 6 PM"
          },
          "customerName": {
            "type": "string",
            "description": "Customer full name (for guest checkout)",
            "example": "Nguyen Van A"
          },
          "email": {
            "type": "string",
            "description": "Customer email (for guest checkout)",
            "example": "guest@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Customer phone (for guest checkout)",
            "example": "+84901234567"
          }
        },
        "required": [
          "paymentMethod"
        ]
      },
      "CancelOrderDto": {
        "type": "object",
        "properties": {
          "cancelReason": {
            "type": "string",
            "description": "Reason for cancellation",
            "example": "Customer requested cancellation"
          }
        },
        "required": [
          "cancelReason"
        ]
      },
      "SendEmailDto": {
        "type": "object",
        "properties": {}
      },
      "TestEmailDto": {
        "type": "object",
        "properties": {}
      },
      "CreatePaymentDto": {
        "type": "object",
        "properties": {}
      },
      "WebhookDto": {
        "type": "object",
        "properties": {}
      },
      "SendPromotionDto": {
        "type": "object",
        "properties": {
          "userIds": {
            "description": "List of user IDs",
            "example": [
              1,
              2,
              3
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "description": "Promotion title",
            "example": "Summer Sale!"
          },
          "message": {
            "type": "string",
            "description": "Promotion message",
            "example": "Get 20% off on all products"
          },
          "data": {
            "type": "object",
            "description": "Promotion data"
          }
        },
        "required": [
          "userIds",
          "title",
          "message"
        ]
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "description": "User ID",
            "example": 1
          },
          "type": {
            "type": "string",
            "description": "Notification type",
            "enum": [
              "ORDER",
              "PROMOTION",
              "SYSTEM",
              "REVIEW",
              "STOCK"
            ],
            "example": "ORDER"
          },
          "title": {
            "type": "string",
            "description": "Notification title",
            "example": "Order Confirmed"
          },
          "message": {
            "type": "string",
            "description": "Notification message",
            "example": "Your order #12345 has been confirmed"
          },
          "data": {
            "type": "object",
            "description": "Additional data"
          },
          "sendEmail": {
            "type": "boolean",
            "description": "Send email notification",
            "default": false
          }
        },
        "required": [
          "userId",
          "type",
          "title",
          "message"
        ]
      },
      "CreateConversationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "GROUP",
              "SUPPORT"
            ],
            "default": "PRIVATE"
          },
          "title": {
            "type": "string",
            "description": "Conversation title (optional for group/support)"
          },
          "participants": {
            "description": "Array of user IDs to include in conversation",
            "example": [
              1,
              2
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "type",
          "participants"
        ]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "conversationId": {
            "type": "string"
          },
          "senderId": {
            "type": "number"
          },
          "receiverId": {
            "type": "number"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "TEXT",
              "IMAGE",
              "FILE",
              "SYSTEM"
            ]
          },
          "attachments": {
            "type": "object"
          },
          "isRead": {
            "type": "boolean"
          },
          "readAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "sender": {
            "type": "object"
          },
          "receiver": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "conversationId",
          "senderId",
          "receiverId",
          "content",
          "type",
          "isRead",
          "createdAt",
          "updatedAt"
        ]
      },
      "ConversationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "GROUP",
              "SUPPORT"
            ]
          },
          "title": {
            "type": "string"
          },
          "lastMessageAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lastMessage": {
            "$ref": "#/components/schemas/MessageResponseDto"
          },
          "unreadCount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "type",
          "lastMessageAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginatedConversationsDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationResponseDto"
            }
          },
          "pagination": {
            "type": "object"
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "PaginatedMessagesDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageResponseDto"
            }
          },
          "pagination": {
            "type": "object"
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "SendMessageDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Message content"
          },
          "type": {
            "type": "string",
            "enum": [
              "TEXT",
              "IMAGE",
              "FILE",
              "SYSTEM"
            ],
            "default": "TEXT"
          },
          "attachments": {
            "description": "Array of attachment URLs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "receiverId": {
            "type": "number",
            "description": "Receiver user ID"
          }
        },
        "required": [
          "content",
          "type",
          "receiverId"
        ]
      },
      "CreateRatingDto": {
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string",
            "enum": [
              "PRODUCT_REVIEW",
              "SERVICE_REVIEW",
              "BLOG_RATING",
              "CATEGORY_RATING",
              "USER_FEEDBACK",
              "WEBSITE_RATING"
            ]
          },
          "entityId": {
            "type": "number"
          },
          "rating": {
            "type": "number",
            "minimum": 1,
            "maximum": 5
          },
          "title": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "entityType",
          "entityId",
          "rating"
        ]
      },
      "UpdateRatingDto": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "minimum": 1,
            "maximum": 5
          },
          "title": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ModerateRatingDto": {
        "type": "object",
        "properties": {
          "isApproved": {
            "type": "boolean"
          },
          "isFlagged": {
            "type": "boolean"
          }
        },
        "required": [
          "isApproved"
        ]
      },
      "VoteRatingDto": {
        "type": "object",
        "properties": {
          "isHelpful": {
            "type": "boolean"
          }
        },
        "required": [
          "isHelpful"
        ]
      }
    }
  }
}